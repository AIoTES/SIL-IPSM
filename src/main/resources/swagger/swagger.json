{
  "swagger": "2.0",
  "info": {
    "description": "Inter Platform Semantic Mediator API",
    "version": "1.2.0",
    "title": "IPSM API"
  },
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {
      "name": "Alignments"
    },
    {
      "name": "Channels"
    },
    {
      "name": "Translation"
    },
    {
      "name": "Logging"
    }
  ],
  "paths": {
    "/alignments": {
      "get": {
        "tags": [
          "Alignments"
        ],
        "summary": "List alignments",
        "description": "Lists alignments uploaded to the IPSM.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Information about alignments available in this IPSM instance",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AlignmentInfo"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Alignments"
        ],
        "summary": "Upload new alignment",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "alignment",
            "description": "Alignment source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Alignment uploaded successfully",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "208": {
            "description": "Alignment already uploaded",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Wrong arguments",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Alignment with the same ID but different definition exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/alignments/{name}/{version}": {
      "delete": {
        "tags": [
          "Alignments"
        ],
        "summary": "Delete alignment identified by name+version",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the alignment to delete",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the alignment to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Alignment deleted"
          },
          "400": {
            "description": "Alignment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Alignment deletion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "get": {
        "tags": [
          "Alignments"
        ],
        "summary": "Get an alignment identified by name+version",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the alignment to be retrieved",
            "required": true,
            "type": "string"
          },
          {
            "name": "version",
            "in": "path",
            "description": "Version of the alignment to be retrieved",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Alignment successfuly retrieved",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Alignment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Alignment retrieval failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/convert": {
      "post": {
        "tags": [
          "Alignments"
        ],
        "summary": "Convert XML alignment into RDF/XML format",
        "description": "Converts from old pure XML IPSM-AF format (no longer supported) into equivalent newer RDF/XML IPSM-AF",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "alignment",
            "description": "Alignment source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Alignment converted successfuly",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Alignment conversion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/convert/TTL": {
      "post": {
        "tags": [
          "Alignments"
        ],
        "summary": "Convert alignment cells to Turtle format",
        "description": "Converts cells of an alignment to Turtle format",
        "consumes": [
          "application/xml"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "alignment",
            "description": "Alignment source",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Alignment cells converted successfuly",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Alignment cells conversion failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/channels": {
      "get": {
        "tags": [
          "Channels"
        ],
        "summary": "List active IPSM channels",
        "description": "The endpoint returns the list of all IPSM channels which are currently active.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Array of channel information records",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChannelInfo"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Channels"
        ],
        "summary": "Create new channel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "conf",
            "description": "Channel configuration",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Channel created successfully",
            "schema": {
              "$ref": "#/definitions/Response"
            }
          },
          "400": {
            "description": "Channel already exists or wrong arguments",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/channels/{channelId}": {
      "delete": {
        "tags": [
          "Channels"
        ],
        "summary": "Delete channel based on the ID",
        "parameters": [
          {
            "name": "channelId",
            "in": "path",
            "description": "ID of channel to delete",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Channel deleted"
          },
          "400": {
            "description": "Channel not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Closing channel failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/translation": {
      "post": {
        "tags": [
          "Translation"
        ],
        "summary": "Translate JSON-LD message via sequence of alignments",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "data",
            "description": "Translation request data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TranslationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation successful",
            "schema": {
              "$ref": "#/definitions/TranslationResponse"
            }
          },
          "400": {
            "description": "Error during translation",
            "schema": {
              "$ref": "#/definitions/TranslationErrorResponse"
            }
          }
        }
      }
    },
    "/logging": {
      "get": {
        "tags": [
          "Logging"
        ],
        "summary": "Get the current IPSM logging level",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Current logging level successfuly returned",
            "schema": {
              "$ref": "#/definitions/LoggingResponse"
            }
          }
        }
      }
    },
    "/logging/{level}": {
      "post": {
        "tags": [
          "Logging"
        ],
        "summary": "Set logging level",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "level",
            "description": "Logging level",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "trace",
              "debug",
              "info",
              "warn",
              "error",
              "off"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Logging level set successfully",
            "schema": {
              "$ref": "#/definitions/LoggingResponse"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Get this IPSM version info",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "IPSM version info successfuly returned",
            "schema": {
              "$ref": "#/definitions/VersionResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ChannelInfo": {
      "type": "object",
      "required": [
        "id",
        "descId",
        "inpAlignmentName",
        "inpAlignmentVersion",
        "outAlignmentName",
        "outAlignmentVersion",
        "sink",
        "source"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "description": "Identifier of the channel"
        },
        "descId": {
          "type": "string",
          "description": "Business identifier of the channel"
        },
        "source": {
          "type": "string",
          "description": "Identifier representing the source of the channel, i.e. Apache Kafka topic from which IPSM reads the RDF data to be translated"
        },
        "inpAlignmentName": {
          "type": "string",
          "description": "Name of the input alignment, used for translating the incoming RDF data"
        },
        "inpAlignmentVersion": {
          "type": "string",
          "description": "Version of the input alignment, used for translating the incoming RDF data"
        },
        "outAlignmentName": {
          "type": "string",
          "description": "Name of the output alignment, used for translating the outgoing RDF data"
        },
        "outAlignmentVersion": {
          "type": "string",
          "description": "Version of the output alignment, used for translating the outgoing RDF data"
        },
        "sink": {
          "type": "string",
          "description": "Identifier of the sink of the channel, i.e. Apache Kafka topic to which IPSM publishes translated RDF data"
        }
      }
    },
    "ChannelConfig": {
      "type": "object",
      "required": [
        "inpAlignmentName",
        "inpAlignmentVersion",
        "outAlignmentName",
        "outAlignmentVersion",
        "sink",
        "source"
      ],
      "properties": {
        "source": {
          "type": "string",
          "description": "Identifier representing the source of the channel, i.e. Apache Kafka topicfrom which IPSM reads the RDF data to be translated"
        },
        "inpAlignmentName": {
          "type": "string",
          "description": "Name of the input alignment, used for translating the incoming RDF data"
        },
        "inpAlignmentVersion": {
          "type": "string",
          "description": "Version of the input alignment, used for translating the incoming RDF data"
        },
        "outAlignmentName": {
          "type": "string",
          "description": "Name of the output alignment, used for translating the outgoing RDF data"
        },
        "outAlignmentVersion": {
          "type": "string",
          "description": "Version of the output alignment, used for translating the outgoing RDF data"
        },
        "sink": {
          "type": "string",
          "description": "Identifier of the sink of the channel, i.e., Apache Kafka topic to which IPSM publishes translated RDF data"
        },
        "parallelism": {
          "type": "integer",
          "default": 1,
          "description": "Internal parallelism of the channel, e.g., the value 5 means that the channel can consume 5 messages in parallel (preserving their time order)"
        }
      }
    },
    "Alignment": {
      "type": "object",
      "xml": {
        "namespace": "http://www.inter-iot.eu/sripas#"
      },
      "required": [
        "align:onto1",
        "align:onto2",
        "steps",
        "align:map"
      ],
      "properties": {
        "dcelem:title": {
          "type": "string",
          "description": "Alignment name"
        },
        "exmo:version": {
          "type": "string",
          "description": "alignment version"
        },
        "dcelem:creator": {
          "type": "string",
          "description": "alignment creator"
        },
        "dcelem:description": {
          "type": "string",
          "description": "alignment description"
        },
        "align:xml": {
          "type": "string",
          "description": "yes"
        },
        "align:level": {
          "type": "string",
          "description": "2IPSM for ISPM-AF; Level from Alignment Format specification"
        },
        "align:type": {
          "type": "string",
          "description": "**; type form Alignment Format specification"
        },
        "align:method": {
          "type": "string",
          "description": "method of alignment construction e.g. manual"
        },
        "align:time": {
          "type": "string",
          "description": "time of alignment creation"
        },
        "align:onto1": {
          "type": "object",
          "description": "align:onto1",
          "required": [
            "align:Ontology"
          ],
          "properties": {
            "align:Ontology": {
              "type": "object",
              "description": "Contains the URI identifying the ontology",
              "properties": {
                "about": {
                  "type": "string",
                  "description": "URI identifying the ontology",
                  "xml": {
                    "attribute": true
                  }
                }
              }
            }
          }
        },
        "align:onto2": {
          "type": "object",
          "description": "align:onto2",
          "required": [
            "align:Ontology"
          ],
          "properties": {
            "align:Ontology": {
              "type": "object",
              "description": "Contains the URI identifying the ontology",
              "properties": {
                "about": {
                  "type": "string",
                  "description": "URI identifying the ontology",
                  "xml": {
                    "attribute": true
                  }
                }
              }
            }
          }
        },
        "sripas:steps": {
          "type": "object",
          "description": "Steps",
          "properties": {
            "step": {
              "type": "object",
              "description": "Alignment step",
              "properties": {
                "cell": {
                  "type": "string",
                  "description": "Alignment cell ID",
                  "xml": {
                    "attribute": true
                  }
                },
                "order": {
                  "type": "integer",
                  "description": "Order of cell application",
                  "xml": {
                    "attribute": true
                  }
                }
              }
            }
          }
        },
        "align:map": {
          "type": "object",
          "description": "align:map",
          "properties": {
            "Cell": {
              "type": "object",
              "description": "Cell",
              "required": [
                "align:entity1",
                "align:entity2",
                "align:relation"
              ],
              "properties": {
                "align:entity1": {
                  "type": "object",
                  "description": "The first aligned ontology entity ",
                  "properties": {}
                },
                "align:entity2": {
                  "type": "object",
                  "description": "The second aligned ontology entity ",
                  "properties": {}
                },
                "align:relation": {
                  "type": "string",
                  "description": "Relation"
                }
              }
            }
          }
        }
      }
    },
    "AlignmentInfo": {
      "type": "object",
      "required": [
        "id",
        "descId",
        "date",
        "name",
        "version",
        "sourceOntologyURI",
        "targetOntologyURI",
        "creator",
        "description"
      ],
      "properties": {
        "descId": {
          "type": "string",
          "description": "Business identifier"
        },
        "id": {
          "type": "integer",
          "description": "Technical identifier"
        },
        "date": {
          "type": "integer",
          "description": "UNIX timestamp of upload to IPSM"
        },
        "name": {
          "type": "string",
          "description": "Name of the alignment"
        },
        "sourceOntologyURI": {
          "type": "string",
          "description": "URI of the source ontology for alignment"
        },
        "targetOntologyURI": {
          "type": "string",
          "description": "URI of the target ontology for alignment"
        },
        "version": {
          "type": "string",
          "description": "Alignment version"
        },
        "creator": {
          "type": "string",
          "description": "Alignment creator"
        },
        "description": {
          "type": "string",
          "description": "Alignment description"
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Description of the error"
        }
      }
    },
    "Response": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Descriptive response"
        }
      }
    },
    "LoggingResponse": {
      "type": "object",
      "required": [
        "message",
        "level"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "level": {
          "type": "string",
          "enum": [
            "ALL",
            "TRACE",
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR",
            "OFF"
          ]
        }
      }
    },
    "VersionResponse": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "AlignmentID": {
      "type": "object",
      "required": [
        "name",
        "version"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Alignment name"
        },
        "version": {
          "type": "string",
          "description": "Alignment version"
        }
      }
    },
    "TranslationRequest": {
      "type": "object",
      "required": [
        "alignIDs",
        "graphStr"
      ],
      "properties": {
        "alignIDs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AlignmentID"
          },
          "description": "Sequence of alignment IDs to ba applied"
        },
        "graphStr": {
          "type": "string",
          "description": "JSON-LD message as a string"
        }
      }
    },
    "TranslationResponse": {
      "type": "object",
      "required": [
        "message",
        "graphStr"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Info on the success of the translation"
        },
        "graphStr": {
          "type": "string",
          "description": "Translated JSON-LD message as a string"
        }
      }
    },
    "TranslationErrorResponse": {
      "type": "object",
      "required": [
        "message",
        "graphStr"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Info on the failure of the translation"
        },
        "graphStr": {
          "type": "string",
          "maxLength": 0,
          "description": "Empty string"
        }
      }
    }
  }
}
